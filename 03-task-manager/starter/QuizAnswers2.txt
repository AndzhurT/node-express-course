1. In this lesson, you created a middleware function called asyncWrapper. Why?
2. Suppose that you want to make sure that both a status code and and error message are send back to the user 
when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error 
handler that references that class.

const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    // your code here
  }
  res.status(200).json({ task });
});

-------- Answers --------

1. We did that to remove redundancy with the try and catch blocks

2. const getTask = asyncWrapper(async (req, res, next) => {
     const { id: taskID } = req.params;
     const task = await Task.findOne({ _id: taskID });
     if (!task) {
     // your code here
     }
     res.status(200).json({ task });
   });

if the task is not found, we can just return the error message and the status code
For example: 
    return next(CustomAPIError(`Task with ID ${taskID} not found`, 404));

const getTask = asyncWrapper(async (req, res, next) => {
     const { id: taskID } = req.params;
     const task = await Task.findOne({ _id: taskID });
     if (!task) {
       return next(CustomAPIError(`Task with ID ${taskID} not found`, 404));
     }
     res.status(200).json({ task });
   });
